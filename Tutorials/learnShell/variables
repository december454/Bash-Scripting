#! /bin/bash

# No spaces are allowed on either side of the = in variable declaration.
# testVar = 1 testVar= 1 tesVar =1    <--- None of these will work. Anything after a space is seen as another command/argument.
# testVar=1   <--- Correct

pricePerApple=5
firstString=ABC
greeting='Hello        world!'

# A backslash \ prevents special character meanings.
echo "the price of an apple today is: \$HK $pricePerApple"

# Encapsulating a variable with ${....} avoids ambiguity.
echo "The first ten letters of the alphabet are : ${firstString}DEFGHIJ."

# Encapsulating with double quotes "......" preserves whitespace.
echo $greeting" now with spaces: $greeting"

# Substitution allows variables to be given the value of a command output. This can be done in multiple ways:
# You can use back-ticks `.....` like this:
fileList0=`ls ~`
# You can also use $(.....) to do this:
fileList1=$(ls ~) #This will run the command inside of the parenthesis before anything else and then assign its output to the variable.

echo

echo 'fileList0 Using `.....`'
echo "$fileList0"

echo

echo 'fileList1 Using $(.....)'
echo "$fileList1"
